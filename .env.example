# Context Foundry Environment Variables
#
# =============================================================================
# SECURITY NOTICE
# =============================================================================
# NEVER commit your actual .env file to version control!
#
# To use this file:
#   1. Copy this file: cp .env.example .env
#   2. Add your API keys to .env
#   3. Verify .env is in .gitignore (it is by default)
#   4. NEVER run: git add .env
#
# Your .env file is automatically ignored by git and will not be pushed to GitHub.
# =============================================================================

# =============================================================================
# AI PROVIDER CONFIGURATION
# =============================================================================
# Configure which AI provider and model to use for each phase.
# Complete freedom - use ANY provider for ANY phase!
#
# Examples:
#   - Use Claude for everything (default)
#   - Use Claude for planning (Scout/Architect), GPT-4o-mini for coding (Builder)
#   - Use Gemini for everything
#   - Mix and match however you want!

# Scout Phase (Research & Architecture)
SCOUT_PROVIDER=anthropic
SCOUT_MODEL=claude-sonnet-4-5-20250929

# Architect Phase (Planning & Specifications)
ARCHITECT_PROVIDER=anthropic
ARCHITECT_MODEL=claude-sonnet-4-5-20250929

# Builder Phase (Code Implementation)
BUILDER_PROVIDER=anthropic
BUILDER_MODEL=claude-sonnet-4-5-20250929

# Optional: Per-task overrides for Builder phase
# Example: Use a better model for specific tasks
# BUILDER_TASK_1_PROVIDER=anthropic
# BUILDER_TASK_1_MODEL=claude-opus-4-20250514

# =============================================================================
# INTELLIGENT MODEL ROUTING (NEW!)
# =============================================================================
# Automatically route complex tasks to Opus 4 for best quality
# while using Sonnet 4.5 for most tasks (40% cost savings)

# Enable intelligent model routing based on task complexity
MODEL_ROUTING_ENABLED=true

# Default model for most tasks (fast, cost-effective)
MODEL_DEFAULT=claude-sonnet-4-5-20250929

# Complex model for difficult tasks (best quality)
# Used for: Architecture, high-priority tasks, complex algorithms
MODEL_COMPLEX=claude-opus-4-20250514

# Complexity threshold (0-10): Tasks scoring >= this use complex model
# Default: 7 (reasonable balance between cost and quality)
# Lower = more Opus usage (higher cost, better quality)
# Higher = less Opus usage (lower cost, may sacrifice quality on edge cases)
COMPLEXITY_THRESHOLD=7

# =============================================================================
# MULTI-AGENT ORCHESTRATION
# =============================================================================
# Enable parallel multi-agent system for autonomous builds (67% faster!)
# When enabled with --autonomous flag, uses parallel Scout and Builder agents
# for dramatically faster execution.
#
# Performance: 12-16 min (multi-agent) vs 23-45 min (sequential)
# Use --legacy flag to disable on a per-build basis
USE_MULTI_AGENT=true

# =============================================================================
# SMART INCREMENTAL BUILDS (Phase 2) - NEW!
# =============================================================================
# Enable Phase 2 incremental builds for 70-90% speedup on rebuilds
# Includes: global Scout cache, change detection, incremental Builder,
# test impact analysis, and incremental docs.
#
# Performance Impact:
# - Small code changes (1-3 files): 70-90% faster
# - Documentation-only updates: 95% faster
# - Similar project (reuse Scout): 50-70% faster
# - Full rebuild (no cache hits): 0% (same as before)
#
# Safe to enable - gracefully falls back to full build if needed

# Enable Phase 2 incremental builds
INCREMENTAL_PHASE2_ENABLED=true

# Global Scout Cache (cross-project Scout sharing)
# Location: ~/.context-foundry/global-cache/scout/
# TTL: 7 days (168 hours)
GLOBAL_SCOUT_CACHE_ENABLED=true
GLOBAL_SCOUT_CACHE_TTL_HOURS=168

# Change Detection (file-level change tracking)
# Detects changes using git diff + SHA256 hashing
# Works with or without git repository
CHANGE_DETECTION_ENABLED=true

# Incremental Builder (smart file preservation)
# Preserves unchanged files from previous build
# Only rebuilds files affected by changes + dependencies
INCREMENTAL_BUILDER_ENABLED=true
INCREMENTAL_BUILDER_THRESHOLD=30  # Rebuild all if > 30% changed

# Test Impact Analysis (selective test execution)
# Only runs tests affected by code changes
# Requires test framework (pytest, jest, mocha)
TEST_IMPACT_ANALYSIS_ENABLED=true
TEST_IMPACT_THRESHOLD=30  # Run all tests if > 30% changed

# Incremental Documentation (selective doc updates)
# Only regenerates docs for changed source files
# Preserves screenshots for unchanged UI
INCREMENTAL_DOCS_ENABLED=true
INCREMENTAL_DOCS_THRESHOLD=30  # Regenerate all if > 30% changed

# =============================================================================
# API KEYS
# =============================================================================
# Add keys only for providers you're using

# Anthropic (Claude) - Not required for BAML (uses OpenAI instead)
# Get from: https://console.anthropic.com/
# ANTHROPIC_API_KEY=

# OpenAI (GPT) - Required for BAML validation (GPT-4o-mini)
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=

# Google (Gemini)
# Get from: https://ai.google.dev/
# GOOGLE_API_KEY=

# Groq
# Get from: https://console.groq.com/
# GROQ_API_KEY=

# Cloudflare Workers AI
# Get from: https://dash.cloudflare.com/
# CLOUDFLARE_API_KEY=
# CLOUDFLARE_ACCOUNT_ID=

# Fireworks AI
# Get from: https://fireworks.ai/
# FIREWORKS_API_KEY=

# Mistral
# Get from: https://console.mistral.ai/
# MISTRAL_API_KEY=

# Z.ai (GLM)
# Get from: https://z.ai/model-api
# Cost-effective alternative to GPT-4o-mini: GLM-4.6 at $0.60/$2.00 per 1M tokens
# ZAI_API_KEY=

# =============================================================================
# PRICING CONFIGURATION
# =============================================================================
# Auto-update pricing from provider websites

# Enable automatic pricing updates
PRICING_AUTO_UPDATE=true

# How often to update pricing (in days)
PRICING_UPDATE_DAYS=30

# =============================================================================
# LEGACY CONFIGURATION (deprecated - use provider config above)
# =============================================================================
# CLAUDE_MODEL=claude-sonnet-4-20250514
# MAX_TOKENS=8000

# =============================================================================
# INTEGRATIONS
# =============================================================================

# Optional: Slack webhook for notifications (overnight runs, completions)
# Get webhook URL from: https://api.slack.com/messaging/webhooks
# SLACK_WEBHOOK=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# Optional: GitHub token for PR creation AND GitHub Models API access
# Generate token at: https://github.com/settings/tokens
# Token type: Classic (not fine-grained)
# Required scopes:
#   - repo (for private repos) or public_repo (for public repos)
#   - For GitHub Models: FREE - no subscription needed!
# GITHUB_TOKEN=ghp_your_github_personal_access_token
#
# To use GitHub Models as a provider (FREE):
# BUILDER_PROVIDER=github
# BUILDER_MODEL=gpt-4o  # FREE GPT-4o access!
