name: Validate Patterns

on:
  pull_request:
    paths:
      - '.context-foundry/patterns/*.json'
      - 'scripts/merge-patterns-intelligent.py'
      - 'schemas/pattern_schema.json'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    name: Validate Pattern Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Validate JSON syntax
        run: |
          echo "üîç Validating JSON syntax..."
          for file in .context-foundry/patterns/*.json; do
            if [ -f "$file" ]; then
              echo "  Checking: $file"
              if ! python3 -m json.tool "$file" > /dev/null; then
                echo "‚ùå Invalid JSON in $file"
                exit 1
              fi
            fi
          done
          echo "‚úÖ All JSON files are valid"

      - name: Check for duplicate pattern IDs
        run: |
          echo "üîç Checking for duplicate pattern IDs..."

          # Check common-issues.json
          if [ -f ".context-foundry/patterns/common-issues.json" ]; then
            DUPLICATES=$(jq -r '.patterns[].pattern_id' .context-foundry/patterns/common-issues.json | sort | uniq -d)
            if [ -n "$DUPLICATES" ]; then
              echo "‚ùå Duplicate pattern IDs found in common-issues.json:"
              echo "$DUPLICATES"
              exit 1
            fi
          fi

          # Check scout-learnings.json
          if [ -f ".context-foundry/patterns/scout-learnings.json" ]; then
            DUPLICATES=$(jq -r '.learnings[].learning_id' .context-foundry/patterns/scout-learnings.json | sort | uniq -d)
            if [ -n "$DUPLICATES" ]; then
              echo "‚ùå Duplicate learning IDs found in scout-learnings.json:"
              echo "$DUPLICATES"
              exit 1
            fi
          fi

          echo "‚úÖ No duplicate IDs found"

      - name: Validate required fields
        run: |
          echo "üîç Validating required fields..."

          # Validate common-issues.json
          if [ -f ".context-foundry/patterns/common-issues.json" ]; then
            echo "  Checking common-issues.json..."
            python3 << 'EOF'
          import json
          import sys

          with open('.context-foundry/patterns/common-issues.json', 'r') as f:
              data = json.load(f)

          required_top_level = ['patterns', 'version', 'last_updated', 'total_builds']
          for field in required_top_level:
              if field not in data:
                  print(f"‚ùå Missing required field: {field}")
                  sys.exit(1)

          required_pattern_fields = ['pattern_id', 'first_seen', 'last_seen', 'frequency', 'project_types', 'issue', 'solution', 'severity']
          for i, pattern in enumerate(data.get('patterns', [])):
              for field in required_pattern_fields:
                  if field not in pattern:
                      print(f"‚ùå Pattern {i} missing required field: {field}")
                      print(f"   Pattern ID: {pattern.get('pattern_id', 'unknown')}")
                      sys.exit(1)

          print("‚úÖ common-issues.json has all required fields")
          EOF
          fi

          # Validate scout-learnings.json
          if [ -f ".context-foundry/patterns/scout-learnings.json" ]; then
            echo "  Checking scout-learnings.json..."
            python3 << 'EOF'
          import json
          import sys

          with open('.context-foundry/patterns/scout-learnings.json', 'r') as f:
              data = json.load(f)

          required_top_level = ['learnings', 'version', 'last_updated']
          for field in required_top_level:
              if field not in data:
                  print(f"‚ùå Missing required field: {field}")
                  sys.exit(1)

          required_learning_fields = ['learning_id', 'category', 'project_types', 'key_points']
          for i, learning in enumerate(data.get('learnings', [])):
              for field in required_learning_fields:
                  if field not in learning:
                      print(f"‚ùå Learning {i} missing required field: {field}")
                      print(f"   Learning ID: {learning.get('learning_id', 'unknown')}")
                      sys.exit(1)

          print("‚úÖ scout-learnings.json has all required fields")
          EOF
          fi

          echo "‚úÖ All required fields present"

      - name: Validate severity levels
        run: |
          echo "üîç Validating severity levels..."

          if [ -f ".context-foundry/patterns/common-issues.json" ]; then
            python3 << 'EOF'
          import json
          import sys

          with open('.context-foundry/patterns/common-issues.json', 'r') as f:
              data = json.load(f)

          valid_severities = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']
          for pattern in data.get('patterns', []):
              severity = pattern.get('severity')
              if severity not in valid_severities:
                  print(f"‚ùå Invalid severity '{severity}' in pattern: {pattern.get('pattern_id')}")
                  print(f"   Valid values: {', '.join(valid_severities)}")
                  sys.exit(1)

          print("‚úÖ All severity levels are valid")
          EOF
          fi

      - name: Test merge integrity
        run: |
          echo "üîç Testing merge integrity..."

          # Create a test merge to ensure no data corruption
          TEMP_DIR=$(mktemp -d)

          for pattern_type in common-issues scout-learnings; do
            SOURCE_FILE=".context-foundry/patterns/${pattern_type}.json"

            if [ -f "$SOURCE_FILE" ]; then
              echo "  Testing $pattern_type merge..."

              # Test merging file with itself (should be idempotent)
              python3 scripts/merge-patterns-intelligent.py \
                --source "$SOURCE_FILE" \
                --dest "$SOURCE_FILE" \
                --type "$pattern_type" \
                --output "$TEMP_DIR/${pattern_type}-test.json"

              # Verify output is valid JSON
              if ! python3 -m json.tool "$TEMP_DIR/${pattern_type}-test.json" > /dev/null; then
                echo "‚ùå Merge produced invalid JSON for $pattern_type"
                exit 1
              fi
            fi
          done

          rm -rf "$TEMP_DIR"
          echo "‚úÖ Merge integrity test passed"

      - name: Generate validation summary
        run: |
          echo "## ‚úÖ Pattern Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f ".context-foundry/patterns/common-issues.json" ]; then
            PATTERN_COUNT=$(jq '.patterns | length' .context-foundry/patterns/common-issues.json)
            TOTAL_BUILDS=$(jq '.total_builds' .context-foundry/patterns/common-issues.json)
            echo "### Common Issues" >> $GITHUB_STEP_SUMMARY
            echo "- üìã Total patterns: **$PATTERN_COUNT**" >> $GITHUB_STEP_SUMMARY
            echo "- üèóÔ∏è Total builds: **$TOTAL_BUILDS**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f ".context-foundry/patterns/scout-learnings.json" ]; then
            LEARNING_COUNT=$(jq '.learnings | length' .context-foundry/patterns/scout-learnings.json)
            echo "### Scout Learnings" >> $GITHUB_STEP_SUMMARY
            echo "- üîç Total learnings: **$LEARNING_COUNT**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ JSON syntax valid" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ No duplicate IDs" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ All required fields present" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Severity levels valid" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Merge integrity test passed" >> $GITHUB_STEP_SUMMARY

  auto-merge:
    name: Auto-merge Pattern PR
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'patterns') &&
      contains(github.event.pull_request.labels.*.name, 'automated')

    steps:
      - name: Auto-approve PR
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --auto \
            --squash \
            --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}

      - name: Add comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Pattern validation passed! This PR will be automatically merged.\n\nThank you for contributing to the Context Foundry pattern library! üôè\n\nYour patterns will be included in the next nightly release.'
            })
