name: CI Pipeline

on:
  push:
    branches: [ main, multi-agent-orchestration ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff linter
        run: ruff check .

      - name: Run Ruff formatter check
        run: ruff format --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=mcp_server --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security linter
        run: bandit -r mcp_server/ -ll
        continue-on-error: true

      - name: Check for known security vulnerabilities
        run: safety check --json
        continue-on-error: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Context Foundry
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Verify MCP server can start
        run: |
          python -c "from mcp_server import server; print('MCP server imports successfully')"

      - name: Check pattern system functions exist
        run: |
          python -c "import inspect; from mcp_server import server; print('Available functions:', [name for name, obj in inspect.getmembers(server) if inspect.isfunction(obj)])"

  screenshot-tests:
    name: Screenshot System Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Verify screenshot templates exist
        run: |
          test -f tools/screenshot_templates/playwright.config.js || exit 1
          test -f tools/screenshot_templates/screenshot-strategy.json || exit 1
          test -f tools/screenshot_helpers/capture.js || exit 1
          echo "✅ All screenshot templates found"

      - name: Validate screenshot-strategy.json
        run: |
          cat tools/screenshot_templates/screenshot-strategy.json | python -m json.tool > /dev/null
          echo "✅ screenshot-strategy.json is valid JSON"

      - name: Install Playwright (to verify installation works)
        run: |
          cd /tmp
          npm init -y
          npm install -D playwright @playwright/test
          npx playwright install chromium --with-deps
          echo "✅ Playwright installed successfully"

      - name: Test screenshot capture script syntax
        run: |
          cd /tmp
          cp $GITHUB_WORKSPACE/tools/screenshot_helpers/capture.js .
          node -c capture.js
          echo "✅ Screenshot capture script has valid syntax"

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint, test, security, integration, screenshot-tests]
    if: always()
    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.screenshot-tests.result }}" == "success" ]]; then
            echo "✅ CI Pipeline passed!"
            exit 0
          else
            echo "❌ CI Pipeline failed"
            exit 1
          fi
